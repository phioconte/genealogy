""" Generating a local website
    Author                        : Ph OCONTE
    Date                          : november 29, 2021
    Date of last update           : november 29, 2021
    Version                       : 1.0.0
"""
import os
import sqlite3
from PyQt5.QtWidgets import QFileDialog
from shutil import copyfile

from dbmanagment import LinkDb, SelectTabDb
from display import DisplayDate
from reference import event_ind, event_fam, event_gb
repindiv = 'indiv'

h_header = (
    '<!doctype html>\n',
    '<html lang="fr">\n',
    '<head>\n',
    ' <meta charset="utf-8">\n',
    ' <title>GENEALOGY</title>\n',
    ' <!-- meta -->\n',
    ' <meta name="description" content="Genealogy definition">\n',
    ' <meta name="author" content="Ph. OCONTE">\n',
    ' <link rel="stylesheet" href="style.css">\n',
    '<script type="text/javascript">\n',
    'function varia(param) {\n',
    'var vars = {};\n',
    'window.location.href.replace( location.hash, "" ).replace(\n',
    '/[?&]+([^=&]+)=?([^&]*)?/gi,\n',
    'function( m, key, value ) { // callback\n',
    'vars[key] = value !== undefined ? value : "";\n',
    '}\n',
    ');\n',
    '\n',
    'if ( param ) {\n',
    'return vars[param] ? vars[param] : null;\n',
    '} \n',
    'return vars;\n',
    '}\n',
    '</script>\n'
    )

i_header = (
     '<!doctype html>\n',
     '<html lang="fr">\n',
     '<head>\n',
     ' <meta charset="utf-8">\n',
     ' <!-- meta -->\n',
     ' <meta name="description" content="Genealogy definition">\n',
     ' <meta name="author" content="Ph. OCONTE">\n',
     ' <link rel="stylesheet" href="../style.css">\n',
    )


def HtmlWrite(fen):
    """
    Generation of a website of all
    individuals of the genealogy
    public  : all the elements concerning the individual are published
    private : only the first and last name as well as the links are given

    it is defines a backup directory x
    this directory contains:
        index.html : containing the list of all individuals
        style.css  :
        script.js  :
        an individual directory indiv: containing all the individuals
        Each individual is saved according to his identification code
    """
    """
    Create the web site directory

    the website/indiv subdirectory
    the file index.html
    the file individual indiv/xx (xx = id of individual)
    """

    """
    Verify if the website directory exists
    if yes, ask permission to overwrite it
    """
    if os.path.isdir(fen.WebSite):
        os.system("rm -rf %s" % (fen.WebSite))
    os.system('mkdir %s' % (fen.WebSite))
    os.system('mkdir %s/%s' % (fen.WebSite, repindiv))
    fen.Message(fen.mess["htm00"])

    """ Copy the style.css file """
    copyfile("./style.css", "%s/style.css" % (fen.WebSite))

    """ Open the file index.html """
    filehtml = "%s/index.html" % (fen.WebSite)
    wri = open(filehtml, "w")

    """ write the header """
    for h_head in h_header:
        wri.write(h_head)

    conn = sqlite3.connect(LinkDb(fen))
    cursor = conn.cursor()
    wri.write('<body>\n')
    """ Write header """
    HtmlListAlpha(fen, cursor, wri)
    wri.write('<script type="text/javascript" src="script.js"></script>\n')
    wri.write('</body>\n</html>')
    wri.close()

    """ Write all the individuals """
    HtmlWriteAllIndiv(fen, cursor)

    """ Write a file for each individual """
    HtmlWriteIndiv(fen, cursor)

    cursor.close()
    conn.close()

    fen.Message(fen.mess["htm03"])
    return


def HtmlListAlpha(fen, cursor, wri):
    """
    Write list of individuals
    input:
        fen     : pointer to window
        cursor  : pointer to database
        wri     : file to write
    output:
        nothing
    """

    data = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
            'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
            'Y', 'Z', 'All')

    rdata = HtmlListData(fen, cursor)
    wri.write('<form method="get" action="index.html">\n')
    wri.write('<p>\n')
    wri.write('<label for="indiv">')
    wri.write('Select the first letter of the name</label>\n')
    wri.write('<select name="indiv" id="indiv">\n')
    for dat in data:
        if dat in rdata:
            wri.write('<option value="%s">%s</option>\n' % (dat, dat))
    wri.write('<option value="tous">tous</option>\n')
    wri.write('</select>\n')
    wri.write('<input type="submit" value="Envoyer" />\n')
    wri.write('</form>\n')

    wri.write('<div class="footer">\n')
    wri.write("<p><b>Page generated by the python pho tool</b></p>")
    wri.write('</div>\n')
    return rdata


def HtmlWriteAllIndiv(fen, cursor):
    """
    List of all individuals ot the genealogy
    input:
        fen     ; pointer to window
        cursor  : pointer to database
        wri     : file to write
    output:
        nothing
    """

    fen.Message(fen.mess["htm01"])
    filejs = "%s/script.js" % (fen.WebSite)
    wri = open(filejs, "w")

    wri.write('var myArray=[];\n')
    param = ('id', 'name', 'firstname', 'sexe')
    rows = SelectTabDb(fen, cursor, 'indiv', param, 'null', 0, 1,
                       'ORDER BY name, firstname')
    for row in rows:
        wri.write("myArray.push('%s %s %s');\n"
                  % (row[0], row[1], row[2]))

    wri.write("var indiv = varia('indiv');\n")
    wri.write('document.write("<table>");\n')
    wri.write("for (var i = 0; i < myArray.length; i++) {\n")
    wri.write('myArr = myArray[i].split(" ");\n')
    wri.write('if (indiv == myArr[1][0] || indiv == "tous" || indiv == null){\n')
    wri.write('document.write("<tr><td><a href=indiv/"+myArr[0]+".html>");\n')
    wri.write('document.write(myArr[1]+"</a></td>");\n')
    wri.write('document.write("<td>");\n')
    wri.write('for (var j = 2; j < myArr.length; j++){\n')
    wri.write('document.write(myArr[j]+" ");\n')
    wri.write('}\n')
    wri.write('document.write("</td></tr>");\n')
    wri.write('}\n')
    wri.write('}\n')
    wri.write('document.write("</table>");\n')

    wri.close()
    return


def HtmlWriteIndiv(fen, cursor):
    """
    Write all data for each individual
    input:
        fen     : pointer to window
        cursor  : pointer to database
    output:
        nothing
    """

    fen.Message(fen.mess["htm02"])

    param = ('id', 'name', 'firstname', 'idfather', 'idmother', 'sexe',
             'public')
    rows = SelectTabDb(fen, cursor, 'indiv', param, 'null', 0, 1,
                       'ORDER BY name, firstname')

    for row in rows:
        file = "%s/%s/%s.html" % (fen.WebSite, repindiv, row[0])
        wri = open(file, "w")
        """ write header """
        for h_head in i_header:
            wri.write(h_head)
        WriteHeaderIndiv(fen, wri, row[0], row[1], row[2], cursor)
        param = ('idfather', 'idmother')
        if row[4]:
            """ Mother """
            WriteIndiv(fen, wri, row[4], 'm', cursor)
            mother = SelectTabDb(fen, cursor, 'indiv', param, 'id=?',
                                 (row[4],), 0, 'null')
            if mother[1]:
                """ maternel gradfather and grandmother """
                WriteIndiv(fen, wri, mother[1], 'gmm', cursor)
                gmother = SelectTabDb(fen, cursor, 'indiv', param, 'id=?',
                                      (mother[1],), 0, 'null')
                """ Maternal great-grandparents """
                if gmother[1]:
                    WriteIndiv(fen, wri, gmother[1], 'gmmm', cursor)
                if gmother[0]:
                    WriteIndiv(fen, wri, gmother[0], 'gpmm', cursor)
            if mother[0]:
                WriteIndiv(fen, wri, mother[0], 'gpm', cursor)
                gfather = SelectTabDb(fen, cursor, 'indiv', param, 'id=?',
                                      (mother[0],), 0, 'null')
                if gfather[1]:
                    WriteIndiv(fen, wri, gfather[1], 'gmmp', cursor)
                if gfather[0]:
                    WriteIndiv(fen, wri, gfather[0], 'gpmp', cursor)
        if row[3]:
            """ FATHER """
            WriteIndiv(fen, wri, row[3], 'p', cursor)
            father = SelectTabDb(fen, cursor, 'indiv', param, 'id=?',
                                 (row[3],), 0, 'null')
            if father[1]:
                WriteIndiv(fen, wri, father[1], 'gmp', cursor)
                gmother = SelectTabDb(fen, cursor, 'indiv', param, 'id=?',
                                      (father[1],), 0, 'null')
                if gmother[1]:
                    WriteIndiv(fen, wri, gmother[1], 'gmpm', cursor)
                if gmother[0]:
                    WriteIndiv(fen, wri, gmother[0], 'gppm', cursor)
            if father[0]:
                WriteIndiv(fen, wri, father[0], 'gpp', cursor)
                gfather = SelectTabDb(fen, cursor, 'indiv', param, 'id=?',
                                      (father[0],), 0, 'null')
                if gfather[1]:
                    WriteIndiv(fen, wri, gfather[1], 'gmpp', cursor)
                if gfather[0]:
                    WriteIndiv(fen, wri, gfather[0], 'gppp', cursor)

        wri.write('<p class="nom"/>\n')
        wri.write('<h1>%s %s</h1>\n' % (row[1], row[2]))
        wri.write('<p>%s %s</p>\n' % (row[1], row[2]))
        WriteCivil(fen, row[6], row[0], wri, row[5], cursor)
        WriteFamily(fen, row[0], wri, row[5], row[6], cursor)

        wri.write('<div class="footer">\n')
        wri.write("<p><b>Page générée par l'outil python pho</b></p>")
        wri.write('</div>\n')

        wri.write('</body>\n</html>')
        wri.close()

    return


def WriteCivil(fen, public, id, wri, sexe, cursor):
    """
    If public, definition of the civil status of the individual
    input:
        fen     : pointer to window
        public  : 0 = public, 1 = private
        id      : individual id
        wri     : file to write
        sexe    : sexe of individual
        cursor  : pointer to database
    output:
        nothing
    """

    wri.write('<div class="civil">\n')
    wri.write('<h2>marital status</h2>\n')
    wri.write('<p>sexe ')
    if sexe == 'F':
        wri.write('women</p>\n')
    else:
        wri.write('man</p>\n')
    if public == 0:
        wri.write('</div>\n')
        return
    """ Write all deeds for individual """
    for eventx in event_ind:
        WriteEvent(fen, id, eventx, wri, cursor, 0, 0)

    wri.write('</div>\n')
    return


def WriteFamily(fen, id, wri, sexe, public, cursor):
    """
    Define the family
    input:
        fen     : pointer to window
        id      : individual id
        wri     : file to write
        sexe    : individual sexe
        cursor  : pointer to database
    output:
        nothing
    """

    wri.write('<div class="famille">\n')
    wri.write('<h2>Family</h2>\n')
    """ Search spouses """
    if sexe == 'F':
        fams = SelectTabDb(fen, cursor, 'fam', ('idh',), 'idw=?',
                           (id,), 1, 'null')
    else:
        fams = SelectTabDb(fen, cursor, 'fam', ('idw',), 'idh=?',
                           (id,), 1, 'null')
    if fams:
        wri.write('<p><b>Spouse(s)</b></p>')
        for fam in fams:
            if fam[0]:
                spouse = SelectTabDb(fen, cursor, 'indiv',
                                     ('name', 'firstname'),
                                     'id=?', (fam[0],), 0, 'null')
                wri.write('<a href="%s.html">%s %s</a><br><br>\n'
                          % (fam[0], spouse[0], spouse[1]))
                if public == 1:
                    for eventx in event_fam:
                        WriteEvent(fen, id, eventx, wri,
                                   cursor, 1, fam[0])

    """ Search children """
    if sexe == 'F':
        children = SelectTabDb(fen, cursor, 'indiv',
                               ('id', 'name', 'firstname'),
                               'idmother=?', (id,), 1,
                               'ORDER BY name, firstname')
    else:
        children = SelectTabDb(fen, cursor, 'indiv',
                               ('id', 'name', 'firstname'),
                               'idfather=?', (id,), 1,
                               'ORDER BY name, firstname')
    if children:
        wri.write('<p><b>Child(ren)</b></p>')
        for child in children:
            wri.write('<a href="%s.html">%s %s</a><br>\n'
                      % (child[0], child[1], child[2]))

    """ Search brother(s) and sister(s) """
    WriteBrSi(fen, id, wri, cursor)
    wri.write('</div>\n')
    return


def WriteBrSi(fen, id, wri, cursor):
    """
    Search brothers and sisters
    input:
        fen     : pointer to window
        id      : individual id
        wri     : file to write
        sexe    : individual sexe
        cursor  : pointer to database
    output:
        nothing
    """
    row = SelectTabDb(fen, cursor, 'indiv', ('idfather', 'idmother'),
                      'id=?', (id,), 0, 'null')
    if row[0] and row[1]:
        brsi = SelectTabDb(fen, cursor, 'indiv',
                           ('id', 'name', 'firstname'),
                           'idfather=? AND idmother=? AND NOT id=?',
                           (row[0], row[1], id), 1, 'null')
        if brsi:
            wri.write('<br><p><b>Brother(s) and sister(s)</b></p>')
            for brs in brsi:
                wri.write('<a href="%s.html">%s %s</a><br>\n'
                          % (brs[0], brs[1], brs[2]))
    else:
        if row[0]:
            brsi = SelectTabDb(fen, cursor, 'indiv',
                               ('id', 'name', 'firstname'),
                               'idfather=? AND NOT id=?',
                               (row[0], id), 1, 'null')
            if brsi:
                wri.write('<br><p><b>Brother(s) and sister(s)</b></p>')
                for brs in brsi:
                    wri.write('<a href="%s.html">%s %s</a><br>\n'
                              % (brs[0], brs[1], brs[2]))
        else:
            if row[1]:
                brsi = SelectTabDb(fen, cursor, 'indiv',
                                   ('id', 'name', 'firstname'),
                                   'idmother=? AND NOT id=?',
                                   (row[1], id), 1, 'null')
                if brsi:
                    wri.write('<br><p><b>Brother(s) and sister(s)</b></p>')
                    for brs in brsi:
                        wri.write('<a href="%s.html">%s %s</a><br>\n'
                                  % (brs[0], brs[1], brs[2]))
    return


def WriteEvent(fen, id, eventx, wri, cursor, flag, ids):
    """
    write event
    input:
        fen     : pointer to window
        id      : individual id
        eventx  : event to select
        wri     : write file
        cursor  : pointer to database
        flag    : 0 = event to indidual, 1 = event to family
        ids     : Spouse id
    output:
        nothing
    """
    param = ('day', 'month', 'year', 'precision', 'city',
             'note', 'source', 'com1')
    event = SelectTabDb(fen, cursor, 'event', param,
                        '(idh=? OR idw=?) AND type=?',
                        (id, id, eventx), 0, 'null')

    if event:
        if flag == 0:
            wri.write("<p><b>%s :</b><br>" % (fen.LocEvent[event_gb.index(eventx) - 1]))
        else:
            wri.write("<p><b>%s :</b><br>" % (fen.LocEvent[event_gb.index(eventx) - 1]))
        if eventx == 'OCCU' or eventx == 'RESI':
            wri.write("%s " % (event[7]))
        date = DisplayDate(fen, event[0], event[1], event[2], event[3])
        wri.write("%s " % (date))
        if event[4]:
            wri.write("%s " % (event[4]))
        wri.write("</p>\n")
        if event[5]:
            wri.write('<p STYLE="padding:0 0 0 20px;"><b>Note   :</b>\
                      %s</p>\n' % (event[5]))
        if event[6]:
            wri.write('<p STYLE="padding:0 0 0 20px;"><b>Source :</b>\
                      %s</p>\n' % (event[6]))
    return


def WriteHeaderIndiv(fen, wri, id, name, firstname, cursor):
    """
    Write the header for file individual
    input:
        fen       : pointer to window
        wri       : file to write
        id        : individual id
        name      : name
        firstname : firstname
        cursor    : pointer to database
    output:
        nothing
    """

    wri.write('<title> %s %s </title>\n' % (name, firstname))
    wri.write('</head>\n')
    wri.write('<body>\n')
    wri.write('<div class="backlink">\n')
    wri.write('  <a href="../index.html?indiv=%s">Page d\'accueil</a>\n'
              % (name[0]))
    wri.write('</div>\n')
    WriteIndiv(fen, wri, id, 'ident', cursor)
    return


def WriteIndiv(fen, wri, id, indice, cursor):
    """
    define link to individual
    input:
        fen     : pointer to window
        wri     : file to write
        id      : id individual
        indice  : level
        cursor  : pointer to database
    output:
        nothing
    """

    wri.write('<div class="boite %s">\n' % (indice))
    row = SelectTabDb(fen, cursor, 'indiv', ('name', 'firstname'),
                      'id=?', (id,), 0, 'null')
    if row:
        wri.write('<a href="%s.html">%s %s<br>\n' % (id, row[0], row[1]))

    """ Search birth and death """
    param = ('day', 'month', 'year', 'precision')
    row = SelectTabDb(fen, cursor, 'event', param,
                      '(idh=? OR idw=?) AND type=?',
                      (id, id, 'BIRT'), 0, 'null')
    if row:
        date = DisplayDate(fen, row[0], row[1], row[2], row[3])
        wri.write('%s -' % (date))
    row = SelectTabDb(fen, cursor, 'event', param,
                      '(idh=? OR idw=?) AND type=?',
                      (id, id, 'DEAT'), 0, 'null')
    if row:
        date = DisplayDate(fen, row[0], row[1], row[2], row[3])
        wri.write('- %s' % (date))
    wri.write('</a>\n')
    wri.write('<div class="l1"> </div>\n')
    wri.write('<div class="l2"> </div>\n')
    if not(indice == 'indiv' or indice == 'm' or indice == 'p'):
        wri.write('<div class="l3"> </div>\n')
        wri.write('<div class="l4"> </div>\n')
    wri.write('</div>\n')
    return


def HtmlListData(fen, cursor):
    """
    Individuals list
    input:
        fen     : pointer to window
        cursor  : pointer to database
    output:
        data    : individuals list
    """

    data = []
    rows = SelectTabDb(fen, cursor, 'indiv', ('name',), 'null', 0,
                       1, 'ORDER BY name')
    for row in rows:
        if row[0][0] not in data:
            data.append(row[0][0])
    return data
